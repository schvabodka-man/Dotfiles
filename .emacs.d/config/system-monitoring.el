(defun get-wifi-address (&optional dev)
  (setq wifi (let ((dev (if dev dev "wlo1")))
			   (format-network-address (car (network-interface-info dev)) t)))
  (if (= (length wifi) 0)
	  (print "-")
	(print wifi)))

(defun get-ethernet-address (&optional dev)
  (setq ip (let ((dev (if dev dev "eth0")))
			 (format-network-address (car (network-interface-info dev)) t)))
  (if (= (length ip) 0)
	  (print "-")
	(print ip)))
(el-get-bundle top-mode
  :url "https://www.emacswiki.org/emacs/download/top-mode.el"
  :description "Top mode"
  :features top-mode)
(load "~/.emacs.d/el-get/top-mode/top-mode")
(defun htop ()
  (interactive)
  (make-new-buffer)
  (top-mode)
  (top))
(defun top-auto-refresh (rate)
  (interactive "nTop refresh rate (seconds): ")
  (progn
	(cancel-function-timers 'top)
	(if (not (zerop rate))
		(setq *top-refresh-timer*
			  (run-with-timer 2 rate 'top)))))
(defalias 'process-manager 'htop)
(defalias 'htop-auto-refresh 'top-auto-refresh)
(define-key top-mode-map (kbd "C-k") #'top-mode-kill)
(define-key top-mode-map (kbd "C-S-k") #'top-mode-kill-noconfirm)
(define-key top-mode-map (kbd "C-u") #'top-mode-unmark)
(define-key top-mode-map (kbd "C-m") #'top-mode-mark)
(define-key top-mode-map (kbd "M-g") #'top-mode-goto-pid)
(define-key top-mode-map (kbd "M-S-r") #'top-auto-refresh)
(define-key top-mode-map (kbd "M-r") #'top)
(define-key top-mode-map (kbd "<C-delete>") 'top-mode-kill-noconfirm)
(define-key top-mode-map (kbd "<delete>") 'top-mode-kill)
(define-key top-mode-map (kbd "<") nil)
(define-key top-mode-map (kbd ">") nil)
(define-key top-mode-map (kbd "A") nil)
(define-key top-mode-map (kbd "B") nil)
(define-key top-mode-map (kbd "C") nil)
(define-key top-mode-map (kbd "D") nil)
(define-key top-mode-map (kbd "E") nil)
(define-key top-mode-map (kbd "F") nil)
(define-key top-mode-map (kbd "G") nil)
(define-key top-mode-map (kbd "H") nil)
(define-key top-mode-map (kbd "I") nil)
(define-key top-mode-map (kbd "J") nil)
(define-key top-mode-map (kbd "K") nil)
(define-key top-mode-map (kbd "L") nil)
(define-key top-mode-map (kbd "M") nil)
(define-key top-mode-map (kbd "N") nil)
(define-key top-mode-map (kbd "O") nil)
(define-key top-mode-map (kbd "P") nil)
(define-key top-mode-map (kbd "Q") nil)
(define-key top-mode-map (kbd "R") nil)
(define-key top-mode-map (kbd "S") nil)
(define-key top-mode-map (kbd "T") nil)
(define-key top-mode-map (kbd "U") nil)
(define-key top-mode-map (kbd "V") nil)
(define-key top-mode-map (kbd "W") nil)
(define-key top-mode-map (kbd "X") nil)
(define-key top-mode-map (kbd "Y") nil)
(define-key top-mode-map (kbd "Z") nil)
(define-key top-mode-map (kbd "a") nil)
(define-key top-mode-map (kbd "b") nil)
(define-key top-mode-map (kbd "c") nil)
(define-key top-mode-map (kbd "d") nil)
(define-key top-mode-map (kbd "e") nil)
(define-key top-mode-map (kbd "f") nil)
(define-key top-mode-map (kbd "g") nil)
(define-key top-mode-map (kbd "h") nil)
(define-key top-mode-map (kbd "i") nil)
(define-key top-mode-map (kbd "j") nil)
(define-key top-mode-map (kbd "k") nil)
(define-key top-mode-map (kbd "l") nil)
(define-key top-mode-map (kbd "m") nil)
(define-key top-mode-map (kbd "n") nil)
(define-key top-mode-map (kbd "o") nil)
(define-key top-mode-map (kbd "p") nil)
(define-key top-mode-map (kbd "q") nil)
(define-key top-mode-map (kbd "r") nil)
(define-key top-mode-map (kbd "s") nil)
(define-key top-mode-map (kbd "t") nil)
(define-key top-mode-map (kbd "u") nil)
(define-key top-mode-map (kbd "v") nil)
(define-key top-mode-map (kbd "w") nil)
(define-key top-mode-map (kbd "x") nil)
(define-key top-mode-map (kbd "y") nil)
(define-key top-mode-map (kbd "z") nil)

;; (use-package symon
;;   :ensure t
;;   :config (symon-mode))
;; (define-symon-monitor time-date
;;   :display (format-time-string "%H:%M %Y/%d/%m %A"))
;; (define-symon-monitor eth-monitor
;;   :display (concat " " (get-ethernet-address)))
;; (define-symon-monitor wifi
;;   :display (concat " " (get-wifi-address)))
;;(use-package fancy-battery
;;  :ensure t
;;  :config (fancy-battery-mode))
