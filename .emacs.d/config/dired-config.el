;; (defun shell-instead-dired ()
;;   (interactive)
;;   (let ((dired-buffer (current-buffer)))
;;	(eshell (concat default-directory "-eshell"))
;;	(kill-buffer dired-buffer)
;;	(delete-other-windows)))
(require 'tar-mode)
(global-set-key (kbd "C-M-d") 'dired-jump)

(set-face-foreground 'dired-directory "white")

(define-key dired-mode-map (kbd "<") nil)
(define-key dired-mode-map (kbd ">") nil)
(define-key dired-mode-map (kbd "A") nil)
(define-key dired-mode-map (kbd "B") nil)
(define-key dired-mode-map (kbd "C") nil)
(define-key dired-mode-map (kbd "D") nil)
(define-key dired-mode-map (kbd "E") nil)
(define-key dired-mode-map (kbd "F") nil)
(define-key dired-mode-map (kbd "G") nil)
(define-key dired-mode-map (kbd "H") nil)
(define-key dired-mode-map (kbd "I") nil)
(define-key dired-mode-map (kbd "J") nil)
(define-key dired-mode-map (kbd "K") nil)
(define-key dired-mode-map (kbd "L") nil)
(define-key dired-mode-map (kbd "M") nil)
(define-key dired-mode-map (kbd "N") nil)
(define-key dired-mode-map (kbd "O") nil)
(define-key dired-mode-map (kbd "P") nil)
(define-key dired-mode-map (kbd "Q") nil)
(define-key dired-mode-map (kbd "R") nil)
(define-key dired-mode-map (kbd "S") nil)
(define-key dired-mode-map (kbd "T") nil)
(define-key dired-mode-map (kbd "U") nil)
(define-key dired-mode-map (kbd "V") nil)
(define-key dired-mode-map (kbd "W") nil)
(define-key dired-mode-map (kbd "X") nil)
(define-key dired-mode-map (kbd "Y") nil)
(define-key dired-mode-map (kbd "Z") nil)
(define-key dired-mode-map (kbd "a") nil)
(define-key dired-mode-map (kbd "b") nil)
(define-key dired-mode-map (kbd "c") nil)
(define-key dired-mode-map (kbd "d") nil)
(define-key dired-mode-map (kbd "e") nil)
(define-key dired-mode-map (kbd "f") nil)
(define-key dired-mode-map (kbd "g") nil)
(define-key dired-mode-map (kbd "h") nil)
(define-key dired-mode-map (kbd "i") nil)
(define-key dired-mode-map (kbd "j") nil)
(define-key dired-mode-map (kbd "k") nil)
(define-key dired-mode-map (kbd "l") nil)
(define-key dired-mode-map (kbd "m") nil)
(define-key dired-mode-map (kbd "n") nil)
(define-key dired-mode-map (kbd "o") nil)
(define-key dired-mode-map (kbd "p") nil)
(define-key dired-mode-map (kbd "q") nil)
(define-key dired-mode-map (kbd "r") nil)
(define-key dired-mode-map (kbd "s") nil)
(define-key dired-mode-map (kbd "t") nil)
(define-key dired-mode-map (kbd "u") nil)
(define-key dired-mode-map (kbd "v") nil)
(define-key dired-mode-map (kbd "w") nil)
(define-key dired-mode-map (kbd "x") nil)
(define-key dired-mode-map (kbd "y") nil)
(define-key dired-mode-map (kbd "z") nil)
(define-key dired-mode-map (kbd ":a") nil)
(define-key dired-mode-map (kbd ":b") nil)
(define-key dired-mode-map (kbd ":c") nil)
(define-key dired-mode-map (kbd ":d") nil)
(define-key dired-mode-map (kbd ":e") nil)
(define-key dired-mode-map (kbd ":f") nil)
(define-key dired-mode-map (kbd ":g") nil)
(define-key dired-mode-map (kbd ":h") nil)
(define-key dired-mode-map (kbd ":i") nil)
(define-key dired-mode-map (kbd ":j") nil)
(define-key dired-mode-map (kbd ":k") nil)
(define-key dired-mode-map (kbd ":l") nil)
(define-key dired-mode-map (kbd ":m") nil)
(define-key dired-mode-map (kbd ":n") nil)
(define-key dired-mode-map (kbd ":o") nil)
(define-key dired-mode-map (kbd ":p") nil)
(define-key dired-mode-map (kbd ":q") nil)
(define-key dired-mode-map (kbd ":r") nil)
(define-key dired-mode-map (kbd ":s") nil)
(define-key dired-mode-map (kbd ":t") nil)
(define-key dired-mode-map (kbd ":u") nil)
(define-key dired-mode-map (kbd ":v") nil)
(define-key dired-mode-map (kbd ":w") nil)
(define-key dired-mode-map (kbd ":x") nil)
(define-key dired-mode-map (kbd ":y") nil)
(define-key dired-mode-map (kbd ":z") nil)
(define-key dired-mode-map (kbd ":A") nil)
(define-key dired-mode-map (kbd ":B") nil)
(define-key dired-mode-map (kbd ":C") nil)
(define-key dired-mode-map (kbd ":D") nil)
(define-key dired-mode-map (kbd ":E") nil)
(define-key dired-mode-map (kbd ":F") nil)
(define-key dired-mode-map (kbd ":G") nil)
(define-key dired-mode-map (kbd ":H") nil)
(define-key dired-mode-map (kbd ":I") nil)
(define-key dired-mode-map (kbd ":J") nil)
(define-key dired-mode-map (kbd ":K") nil)
(define-key dired-mode-map (kbd ":L") nil)
(define-key dired-mode-map (kbd ":M") nil)
(define-key dired-mode-map (kbd ":N") nil)
(define-key dired-mode-map (kbd ":O") nil)
(define-key dired-mode-map (kbd ":P") nil)
(define-key dired-mode-map (kbd ":Q") nil)
(define-key dired-mode-map (kbd ":R") nil)
(define-key dired-mode-map (kbd ":S") nil)
(define-key dired-mode-map (kbd ":T") nil)
(define-key dired-mode-map (kbd ":U") nil)
(define-key dired-mode-map (kbd ":V") nil)
(define-key dired-mode-map (kbd ":W") nil)
(define-key dired-mode-map (kbd ":X") nil)
(define-key dired-mode-map (kbd ":Y") nil)
(define-key dired-mode-map (kbd ":Z") nil)
(define-key dired-mode-map (kbd "M-b") nil)
(define-key dired-mode-map (kbd "C-M") nil)
(define-key dired-mode-map (kbd "M-q") nil)
(define-key dired-mode-map (kbd "+") nil)
(define-key dired-mode-map (kbd "M-G") nil)

(define-key dired-mode-map (kbd "C-n") #'find-file)
(define-key dired-mode-map (kbd "C-S-n") #'dired-create-directory)
(define-key dired-mode-map (kbd "M-g") #'dired-goto-file)
(define-key dired-mode-map (kbd "M-S-g") #'dired-goto-subdir)
(define-key dired-mode-map (kbd "M-c") #'dired-do-copy)
(define-key dired-mode-map (kbd "C-M-c") #'dired-do-copy-regexp)
(define-key dired-mode-map (kbd "<down>") #'dired-next-line)
(define-key dired-mode-map (kbd "<up>") #'dired-previous-line)
(define-key dired-mode-map (kbd "<delete>") #'dired-do-delete)
(define-key dired-mode-map (kbd "<C-delete>") #'dired-flag-file-deletion)
(define-key dired-mode-map (kbd "M-r") #'dired-do-find-regexp-and-replace)
(define-key dired-mode-map (kbd "C-r") #'dired-do-rename-regexp)
(define-key dired-mode-map (kbd "C-m") #'dired-mark)
(define-key dired-mode-map (kbd "C-a") #'dired-toggle-marks)
(define-key dired-mode-map (kbd "C-S-m") #'dired-mark-files-regexp)
(define-key dired-mode-map (kbd "<return>") #'dired-find-file)
(define-key dired-mode-map (kbd "<mouse-1>") #'dired-find-file)
(define-key dired-mode-map (kbd "C-S-r") #'dired-do-query-replace-regexp)
(define-key dired-mode-map (kbd "M-r") #'revert-buffer)
(define-key dired-mode-map (kbd "C-p") #'dired-do-print)
(define-key dired-mode-map (kbd "M-z") #'dired-undo)
(define-key dired-mode-map (kbd "C-u") #'dired-unmark)
(define-key dired-mode-map (kbd "C-S-u") #'dired-unmark-all-marks)
(define-key dired-mode-map (kbd "C-S-f") #'dired-do-find-regexp)
(define-key dired-mode-map (kbd "C-S-u") #'dired-unmark-all-files)
(define-key dired-mode-map (kbd "M-`") #'shell-instead-dired)
(define-key dired-mode-map (kbd "C-~") #'dired-do-shell-command)
(define-key dired-mode-map (kbd "C-`") #'dired-do-async-shell-command)
(define-key dired-mode-map (kbd "C-s") #'dired-do-compress)
(define-key dired-mode-map (kbd "C-b") #'counsel-bookmark)

;; (add-hook 'dired-mode-hook (lambda ()
;;							 (smooth-scrolling-mode nil)))

(setq delete-by-moving-to-trash t)

(defalias 'chmod 'dired-do-chmod)
(defalias 'chown 'dired-do-chown)
(defalias 'chowner 'dired-do-chown)
(defalias 'change-owner 'dired-do-chmod)
(defalias 'ch-owner 'dired-do-chmod)
(defalias 'chgrp 'dired-do-chgrp)
(defalias 'chgroup 'dired-do-chgrp)
(defalias 'change-grp 'dired-do-chgrp)
(defalias 'change-group 'dired-do-chgrp)
(defalias 'ch-grp 'dired-do-chgrp)
(defalias 'ch-group 'dired-do-chgrp)
(defalias 'zip 'dired-do-compress)
(defalias 'compress-file 'dired-do-compress)

(autoload 'dired-async-mode "dired-async.el" nil t)
(dired-async-mode 1)

(el-get-bundle tumme
  :url "http://repo.or.cz/emacs.git/blob_plain/HEAD:/lisp/image-dired.el")
(load "~/.emacs.d/el-get/tumme/image-dired")
(define-key dired-mode-map (kbd "C-i") #'image-dired)

(use-package diredful
  :ensure t
  :pin melpa
  :config (diredful-mode 1))

(use-package dired-filter
  :ensure t
  :pin melpa
  :config (define-key dired-mode-map (kbd "M-f") #'dired-filter-load-saved-filters))
(use-package dired-subtree
  :ensure t
  :pin melpa
  :config (define-key dired-mode-map (kbd "<SPC>") #'dired-subtree-toggle))
;;git
(use-package dired-k
  :ensure t
  :pin melpa
  :config (add-hook 'dired-initial-position-hook 'dired-k)
  (add-hook 'dired-after-readin-hook #'dired-k-no-revert))
;;one buffer per dired
(el-get-bundle joseph-single-dired
  :url "https://www.emacswiki.org/emacs/download/joseph-single-dired.el")
(eval-after-load 'dired '(progn (require 'joseph-single-dired)))

(use-package image+
  :ensure t
  :pin melpa
  :config (eval-after-load 'image '(require 'image+))
  (eval-after-load 'image+ '(imagex-global-sticky-mode 1))
  (eval-after-load 'image+ '(imagex-auto-adjust-mode 1)))

(el-get-bundle image-dired+
  :url "https://raw.githubusercontent.com/mhayashi1120/Emacs-image-diredx/master/image-dired%2B.el")
(load "~/.emacs.d/el-get/image-dired+/image-dired_2B")
(eval-after-load 'image-dired+ '(image-diredx-async-mode 1))

(define-key image-dired-minor-mode-map (kbd "<SPC>") nil)
(define-key image-dired-minor-mode-map (kbd "<backspace>") nil)
(define-key image-dired-minor-mode-map (kbd "A") nil)
(define-key image-dired-minor-mode-map (kbd "B") nil)
(define-key image-dired-minor-mode-map (kbd "C") nil)
(define-key image-dired-minor-mode-map (kbd "D") nil)
(define-key image-dired-minor-mode-map (kbd "E") nil)
(define-key image-dired-minor-mode-map (kbd "F") nil)
(define-key image-dired-minor-mode-map (kbd "G") nil)
(define-key image-dired-minor-mode-map (kbd "H") nil)
(define-key image-dired-minor-mode-map (kbd "I") nil)
(define-key image-dired-minor-mode-map (kbd "J") nil)
(define-key image-dired-minor-mode-map (kbd "K") nil)
(define-key image-dired-minor-mode-map (kbd "L") nil)
(define-key image-dired-minor-mode-map (kbd "M") nil)
(define-key image-dired-minor-mode-map (kbd "N") nil)
(define-key image-dired-minor-mode-map (kbd "O") nil)
(define-key image-dired-minor-mode-map (kbd "P") nil)
(define-key image-dired-minor-mode-map (kbd "Q") nil)
(define-key image-dired-minor-mode-map (kbd "R") nil)
(define-key image-dired-minor-mode-map (kbd "S") nil)
(define-key image-dired-minor-mode-map (kbd "T") nil)
(define-key image-dired-minor-mode-map (kbd "U") nil)
(define-key image-dired-minor-mode-map (kbd "V") nil)
(define-key image-dired-minor-mode-map (kbd "W") nil)
(define-key image-dired-minor-mode-map (kbd "X") nil)
(define-key image-dired-minor-mode-map (kbd "Y") nil)
(define-key image-dired-minor-mode-map (kbd "Z") nil)
(define-key image-dired-minor-mode-map (kbd "a") nil)
(define-key image-dired-minor-mode-map (kbd "b") nil)
(define-key image-dired-minor-mode-map (kbd "c") nil)
(define-key image-dired-minor-mode-map (kbd "d") nil)
(define-key image-dired-minor-mode-map (kbd "e") nil)
(define-key image-dired-minor-mode-map (kbd "f") nil)
(define-key image-dired-minor-mode-map (kbd "g") nil)
(define-key image-dired-minor-mode-map (kbd "h") nil)
(define-key image-dired-minor-mode-map (kbd "i") nil)
(define-key image-dired-minor-mode-map (kbd "j") nil)
(define-key image-dired-minor-mode-map (kbd "k") nil)
(define-key image-dired-minor-mode-map (kbd "l") nil)
(define-key image-dired-minor-mode-map (kbd "m") nil)
(define-key image-dired-minor-mode-map (kbd "n") nil)
(define-key image-dired-minor-mode-map (kbd "o") nil)
(define-key image-dired-minor-mode-map (kbd "p") nil)
(define-key image-dired-minor-mode-map (kbd "q") nil)
(define-key image-dired-minor-mode-map (kbd "r") nil)
(define-key image-dired-minor-mode-map (kbd "s") nil)
(define-key image-dired-minor-mode-map (kbd "t") nil)
(define-key image-dired-minor-mode-map (kbd "u") nil)
(define-key image-dired-minor-mode-map (kbd "v") nil)
(define-key image-dired-minor-mode-map (kbd "w") nil)
(define-key image-dired-minor-mode-map (kbd "x") nil)
(define-key image-dired-minor-mode-map (kbd "y") nil)
(define-key image-dired-minor-mode-map (kbd "z") nil)
(define-key image-dired-minor-mode-map (kbd "<") nil)
(define-key image-dired-minor-mode-map (kbd ">") nil)
(define-key image-dired-minor-mode-map (kbd "<DEL>") nil)

(define-key image-dired-minor-mode-map (kbd "<C-right>") #'image-next-file)
(define-key image-dired-minor-mode-map (kbd "<up>") #'image-scroll-up)
(define-key image-dired-minor-mode-map (kbd "<down>") #'image-scroll-down)
(define-key image-dired-minor-mode-map (kbd "<C-left>") #'image-previous-file)
(define-key image-dired-minor-mode-map (kbd "+") #'imagex-sticky-zoom-in)
(define-key image-dired-minor-mode-map (kbd "-") #'imagex-sticky-zoom-out)
(define-key image-dired-minor-mode-map (kbd "C-s") #'imagex-sticky-save-image)
(define-key image-dired-minor-mode-map (kbd "*") #'imagex-sticky-maximize)
(define-key image-dired-minor-mode-map (kbd ",") #'imagex-sticky-rotate-left)
(define-key image-dired-minor-mode-map (kbd ".") #'imagex-sticky-rotate-right)
(define-key image-dired-minor-mode-map (kbd "=") #'imagex-sticky-restore-original)

(define-key archive-mode-map (kbd "<") nil)
(define-key archive-mode-map (kbd ">") nil)
(define-key archive-mode-map (kbd "A") nil)
(define-key archive-mode-map (kbd "B") nil)
(define-key archive-mode-map (kbd "C") nil)
(define-key archive-mode-map (kbd "D") nil)
(define-key archive-mode-map (kbd "E") nil)
(define-key archive-mode-map (kbd "F") nil)
(define-key archive-mode-map (kbd "G") nil)
(define-key archive-mode-map (kbd "H") nil)
(local-set-key (kbd "I") nil)
(define-key archive-mode-map (kbd "J") nil)
(define-key archive-mode-map (kbd "K") nil)
(define-key archive-mode-map (kbd "L") nil)
(define-key archive-mode-map (kbd "M") nil)
(define-key archive-mode-map (kbd "N") nil)
(define-key archive-mode-map (kbd "O") nil)
(define-key archive-mode-map (kbd "P") nil)
(define-key archive-mode-map (kbd "Q") nil)
(define-key archive-mode-map (kbd "R") nil)
(define-key archive-mode-map (kbd "S") nil)
(define-key archive-mode-map (kbd "T") nil)
(define-key archive-mode-map (kbd "U") nil)
(define-key archive-mode-map (kbd "V") nil)
(define-key archive-mode-map (kbd "W") nil)
(define-key archive-mode-map (kbd "X") nil)
(define-key archive-mode-map (kbd "Y") nil)
(define-key archive-mode-map (kbd "Z") nil)
(define-key archive-mode-map (kbd "a") nil)
(define-key archive-mode-map (kbd "b") nil)
(define-key archive-mode-map (kbd "c") nil)
(define-key archive-mode-map (kbd "d") nil)
(define-key archive-mode-map (kbd "e") nil)
(define-key archive-mode-map (kbd "f") nil)
(define-key archive-mode-map (kbd "g") nil)
(define-key archive-mode-map (kbd "h") nil)
(define-key archive-mode-map (kbd "i") nil)
(define-key archive-mode-map (kbd "j") nil)
(define-key archive-mode-map (kbd "k") nil)
(define-key archive-mode-map (kbd "l") nil)
(define-key archive-mode-map (kbd "m") nil)
(define-key archive-mode-map (kbd "n") nil)
(define-key archive-mode-map (kbd "o") nil)
(define-key archive-mode-map (kbd "p") nil)
(define-key archive-mode-map (kbd "q") nil)
(define-key archive-mode-map (kbd "r") nil)
(define-key archive-mode-map (kbd "s") nil)
(define-key archive-mode-map (kbd "t") nil)
(define-key archive-mode-map (kbd "u") nil)
(define-key archive-mode-map (kbd "v") nil)
(define-key archive-mode-map (kbd "w") nil)
(define-key archive-mode-map (kbd "x") nil)
(define-key archive-mode-map (kbd "y") nil)
(define-key archive-mode-map (kbd "z") nil)
(define-key archive-mode-map (kbd ":a") nil)
(define-key archive-mode-map (kbd ":b") nil)
(define-key archive-mode-map (kbd ":c") nil)
(define-key archive-mode-map (kbd ":d") nil)
(define-key archive-mode-map (kbd ":e") nil)
(define-key archive-mode-map (kbd ":f") nil)
(define-key archive-mode-map (kbd ":g") nil)
(define-key archive-mode-map (kbd ":h") nil)
(define-key archive-mode-map (kbd ":i") nil)
(define-key archive-mode-map (kbd ":j") nil)
(define-key archive-mode-map (kbd ":k") nil)
(define-key archive-mode-map (kbd ":l") nil)
(define-key archive-mode-map (kbd ":m") nil)
(define-key archive-mode-map (kbd ":n") nil)
(define-key archive-mode-map (kbd ":o") nil)
(define-key archive-mode-map (kbd ":p") nil)
(define-key archive-mode-map (kbd ":q") nil)
(define-key archive-mode-map (kbd ":r") nil)
(define-key archive-mode-map (kbd ":s") nil)
(define-key archive-mode-map (kbd ":t") nil)
(define-key archive-mode-map (kbd ":u") nil)
(define-key archive-mode-map (kbd ":v") nil)
(define-key archive-mode-map (kbd ":w") nil)
(define-key archive-mode-map (kbd ":x") nil)
(define-key archive-mode-map (kbd ":y") nil)
(define-key archive-mode-map (kbd ":z") nil)
(define-key archive-mode-map (kbd ":A") nil)
(define-key archive-mode-map (kbd ":B") nil)
(define-key archive-mode-map (kbd ":C") nil)
(define-key archive-mode-map (kbd ":D") nil)
(define-key archive-mode-map (kbd ":E") nil)
(define-key archive-mode-map (kbd ":F") nil)
(define-key archive-mode-map (kbd ":G") nil)
(define-key archive-mode-map (kbd ":H") nil)
(define-key archive-mode-map (kbd ":I") nil)
(define-key archive-mode-map (kbd ":J") nil)
(define-key archive-mode-map (kbd ":K") nil)
(define-key archive-mode-map (kbd ":L") nil)
(define-key archive-mode-map (kbd ":M") nil)
(define-key archive-mode-map (kbd ":N") nil)
(define-key archive-mode-map (kbd ":O") nil)
(define-key archive-mode-map (kbd ":P") nil)
(define-key archive-mode-map (kbd ":Q") nil)
(define-key archive-mode-map (kbd ":R") nil)
(define-key archive-mode-map (kbd ":S") nil)
(define-key archive-mode-map (kbd ":T") nil)
(define-key archive-mode-map (kbd ":U") nil)
(define-key archive-mode-map (kbd ":V") nil)
(define-key archive-mode-map (kbd ":W") nil)
(define-key archive-mode-map (kbd ":X") nil)
(define-key archive-mode-map (kbd ":Y") nil)
(define-key archive-mode-map (kbd ":Z") nil)
(define-key archive-mode-map (kbd "M-b") nil)
(define-key archive-mode-map (kbd "C-M") nil)
(define-key archive-mode-map (kbd "M-q") nil)
(define-key archive-mode-map (kbd "+") nil)
(define-key archive-mode-map (kbd "C-n") nil)
(define-key archive-mode-map (kbd "C-p") nil)

(define-key archive-mode-map (kbd "M-m") #'archive-mark)
(define-key archive-mode-map (kbd "C-r") #'archive-rename-entry)
(define-key archive-mode-map (kbd "C-S-u") #'archive-unmark-all-files)
(define-key archive-mode-map (kbd "C-k") #'archive-flag-deleted)
(define-key archive-mode-map (kbd "M-z") #'archive-undo)
(define-key archive-mode-map (kbd "C-u") #'archive-unflag)
(define-key archive-mode-map (kbd "<delete>") #'dired-do-delete)
(define-key archive-mode-map (kbd "<C-delete>") #'archive-flag-deleted)

(add-hook 'tar-mode-hook
		  (lambda ()
			(null-all-bindings)
			(local-set-key (kbd "M-b") nil)
			(local-set-key (kbd "C-M") nil)
			(local-set-key (kbd "M-q") nil)
			(local-set-key (kbd "+") nil)
			(local-set-key (kbd "C-n") nil)
			(local-set-key (kbd "C-p") nil)))
(define-key tar-mode-map (kbd "M-c") #'tar-copy)
(define-key tar-mode-map (kbd "C-n") #'tar-new-entry)
(define-key tar-mode-map (kbd "C-r") #'tar-rename-entry)
(define-key tar-mode-map (kbd "C-u") #'tar-unflag)
(define-key tar-mode-map (kbd "C-S-u") #'tar-clear-modification-flags)
(define-key tar-mode-map (kbd "C-k") #'tar-flag-deleted)
(define-key tar-mode-map (kbd "RET") #'tar-untar-buffer)
(define-key tar-mode-map (kbd "<delete>") #'tar-expunge)
(define-key tar-mode-map (kbd "<C-delete>") #'tar-flag-deleted)
(use-package dired-toggle-sudo
  :ensure t
  :pin melpa
  :config (defalias 'dired-root 'dired-toggle-sudo)
  (defalias 'dired-su 'dired-toggle-sudo)
  (defalias 'dired-superuser 'dired-toggle-sudo)
  (define-key dired-mode-map (kbd "<f1>") #'dired-toggle-sudo))
(use-package peep-dired
  :ensure t
  :pin melpa
  :config
  (setq peep-dired-cleanup-on-disable t)
  (setq peep-dired-cleanup-eagerly nil)
  (setq peep-dired-enable-on-directories t)
  (define-key dired-mode-map (kbd "M-\\") #'peep-dired))
(use-package neotree
  :ensure t
  :config (add-hook 'neotree-mode-hook (lambda ()
										 (null-all-bindings)))
  (global-set-key (kbd "M-d") 'neotree-toggle)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (define-key neotree-mode-map (kbd "M-r") 'neotree-refresh)
  (define-key neotree-mode-map (kbd "C-n") 'neotree-create-node)
  (define-key neotree-mode-map (kbd "C-r") 'neotree-rename-node)
  (define-key neotree-mode-map (kbd "C-o") 'neotree-open-file-in-system-application)
  (define-key neotree-mode-map (kbd "C-y") 'neotree-copy-filepath-to-yank-ring)
  (define-key neotree-mode-map (kbd "<deletechar>") 'neotree-delete-node)
  (define-key neotree-mode-map (kbd "M-c") 'neotree-copy-node))
