;;; org-config --- My emacs config for org-mode
;;; Commentary:
;;; MUH ORG-MODE
;;; Code:
(require 'org)
(require 'org-agenda)
(setq org-agenda-files (list "~/Org/Agenda/Todo"
							 "~/Org/Agenda/Diary"))
(setq org-archive-location "~/Org/Agenda/archive.org::* TASKS")
(setq org-support-shift-select t)
(setq org-startup-with-inline-images t)
(defalias 'todo 'org-todo-list)
(defalias 'agenda 'org-agenda-list)
(defalias 'year 'org-agenda-year-view)
(defalias 'month 'org-agenda-month-view)
(defalias 'week 'org-agenda-week-view)
(defalias 'day 'org-agenda-day-view)
(defalias 'org-time 'org-time-stamp)
(defalias 'a 'agenda)

(define-key org-mode-map (kbd "C-t") 'org-time-stamp)
(define-key org-mode-map (kbd "M-,") 'org-backward-paragraph)
(define-key org-mode-map (kbd "M-.") 'org-forward-paragraph)
(define-key org-mode-map (kbd "C-/") 'org-ctrl-c-ctrl-c)
(define-key org-mode-map (kbd "M-\\") 'org-shiftright)
(define-key org-mode-map (kbd "M-f") 'deft-find-file)
(define-key org-mode-map (kbd "M-S-f") 'deft)
(define-key org-mode-map (kbd "<S-left>") nil)
(define-key org-mode-map (kbd "<S-right>") nil)
(define-key org-mode-map (kbd "<S-up>") nil)
(define-key org-mode-map (kbd "<S-down>") nil)
(define-key org-mode-map (kbd "<C-tab>") 'company-yasnippet)
(define-key org-mode-map (kbd "M-<up>") 'windmove-up)
(define-key org-mode-map (kbd "M-<down>") 'windmove-down)
(define-key org-mode-map (kbd "M-<left>") 'windmove-left)
(define-key org-mode-map (kbd "M-<right>") 'windmove-right)
(define-key org-agenda-mode-map (kbd "<") nil)
(define-key org-agenda-mode-map (kbd ">") nil)
(define-key org-agenda-mode-map (kbd "A") nil)
(define-key org-agenda-mode-map (kbd "B") nil)
(define-key org-agenda-mode-map (kbd "C") nil)
(define-key org-agenda-mode-map (kbd "D") nil)
(define-key org-agenda-mode-map (kbd "E") nil)
(define-key org-agenda-mode-map (kbd "F") nil)
(define-key org-agenda-mode-map (kbd "G") nil)
(define-key org-agenda-mode-map (kbd "H") nil)
(define-key org-agenda-mode-map (kbd "I") nil)
(define-key org-agenda-mode-map (kbd "J") nil)
(define-key org-agenda-mode-map (kbd "K") nil)
(define-key org-agenda-mode-map (kbd "L") nil)
(define-key org-agenda-mode-map (kbd "M") nil)
(define-key org-agenda-mode-map (kbd "N") nil)
(define-key org-agenda-mode-map (kbd "O") nil)
(define-key org-agenda-mode-map (kbd "P") nil)
(define-key org-agenda-mode-map (kbd "Q") nil)
(define-key org-agenda-mode-map (kbd "R") nil)
(define-key org-agenda-mode-map (kbd "S") nil)
(define-key org-agenda-mode-map (kbd "T") nil)
(define-key org-agenda-mode-map (kbd "U") nil)
(define-key org-agenda-mode-map (kbd "V") nil)
(define-key org-agenda-mode-map (kbd "W") nil)
(define-key org-agenda-mode-map (kbd "X") nil)
(define-key org-agenda-mode-map (kbd "Y") nil)
(define-key org-agenda-mode-map (kbd "Z") nil)
(define-key org-agenda-mode-map (kbd "A") nil)
(define-key org-agenda-mode-map (kbd "B") nil)
(define-key org-agenda-mode-map (kbd "C") nil)
(define-key org-agenda-mode-map (kbd "D") nil)
(define-key org-agenda-mode-map (kbd "E") nil)
(define-key org-agenda-mode-map (kbd "F") nil)
(define-key org-agenda-mode-map (kbd "G") nil)
(define-key org-agenda-mode-map (kbd "H") nil)
(define-key org-agenda-mode-map (kbd "I") nil)
(define-key org-agenda-mode-map (kbd "J") nil)
(define-key org-agenda-mode-map (kbd "K") nil)
(define-key org-agenda-mode-map (kbd "L") nil)
(define-key org-agenda-mode-map (kbd "M") nil)
(define-key org-agenda-mode-map (kbd "N") nil)
(define-key org-agenda-mode-map (kbd "O") nil)
(define-key org-agenda-mode-map (kbd "P") nil)
(define-key org-agenda-mode-map (kbd "Q") nil)
(define-key org-agenda-mode-map (kbd "R") nil)
(define-key org-agenda-mode-map (kbd "S") nil)
(define-key org-agenda-mode-map (kbd "T") nil)
(define-key org-agenda-mode-map (kbd "U") nil)
(define-key org-agenda-mode-map (kbd "V") nil)
(define-key org-agenda-mode-map (kbd "W") nil)
(define-key org-agenda-mode-map (kbd "X") nil)
(define-key org-agenda-mode-map (kbd "Y") nil)
(define-key org-agenda-mode-map (kbd "Z") nil)
(define-key org-agenda-mode-map (kbd "a") nil)
(define-key org-agenda-mode-map (kbd "b") nil)
(define-key org-agenda-mode-map (kbd "c") nil)
(define-key org-agenda-mode-map (kbd "e") nil)
(define-key org-agenda-mode-map (kbd "f") nil)
(define-key org-agenda-mode-map (kbd "g") nil)
(define-key org-agenda-mode-map (kbd "h") nil)
(define-key org-agenda-mode-map (kbd "i") nil)
(define-key org-agenda-mode-map (kbd "j") nil)
(define-key org-agenda-mode-map (kbd "k") nil)
(define-key org-agenda-mode-map (kbd "l") nil)
(define-key org-agenda-mode-map (kbd "n") nil)
(define-key org-agenda-mode-map (kbd "o") nil)
(define-key org-agenda-mode-map (kbd "p") nil)
(define-key org-agenda-mode-map (kbd "q") nil)
(define-key org-agenda-mode-map (kbd "r") nil)
(define-key org-agenda-mode-map (kbd "s") nil)
(define-key org-agenda-mode-map (kbd "t") nil)
(define-key org-agenda-mode-map (kbd "u") nil)
(define-key org-agenda-mode-map (kbd "v") nil)
(define-key org-agenda-mode-map (kbd "x") nil)
(define-key org-agenda-mode-map (kbd "z") nil)

(define-key org-agenda-mode-map (kbd "m") #'org-agenda-month-view)
(define-key org-agenda-mode-map (kbd "y") #'org-agenda-year-view)
(define-key org-agenda-mode-map (kbd "C-g") #'org-agenda-goto-date)
(define-key org-agenda-mode-map (kbd "<return>") #'org-agenda-goto)
(define-key org-agenda-mode-map (kbd "M-f") #'org-agenda-filter-by-tag)
(define-key org-agenda-mode-map (kbd "C-S-f") #'org-agenda-filter-by-regexp)
(define-key org-agenda-mode-map (kbd "M-i") #'org-attach)
(define-key org-agenda-mode-map (kbd "C-e") #'org-agenda-archive)
(define-key org-agenda-mode-map (kbd "M-\\") #'org-agenda-todo)
(define-key org-agenda-mode-map (kbd "C-m") #'org-agenda-bulk-mark)
(define-key org-agenda-mode-map (kbd "C-S-m") #'org-agenda-bulk-mark-all)
(define-key org-agenda-mode-map (kbd "C-u") #'org-agenda-bulk-unmark)
(define-key org-agenda-mode-map (kbd "C-S-u") #'org-agenda-bulk-unmark-all)
(define-key org-agenda-mode-map (kbd "M-z") #'org-agenda-undo)
(define-key org-agenda-mode-map (kbd "M-Z") #'org-agenda-redo)
;;diary
(use-package org-journal
  :ensure t
  :pin melpa-stable
  :config
  (setq org-journal-dir (expand-file-name "~/Org/Agenda/Diary"))
  (setq org-journal-date-format '"<%Y-%m-%d %a>")
  (setq org-journal-time-format '"<%Y-%m-%d %a %R>")
  (setq org-journal-file-format '"%Y-%m-%d.org")
  (defalias 'now 'org-journal-new-entry))
;;nice org mode bullets
;; (use-package org-bullets
;;   :ensure t
;;   :pin melpa-stable
;;   :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

;;like pinboard 
;; (use-package org-board
;;   :ensure t
;;   :pin melpa-stable
;;   :config 
;;   (defalias 'org-board-save 'org-board-new)
;;   (defalias 'org-link-new 'org-board-new)
;;   (defalias 'org-link-save 'org-board-new)
;;   (defalias 'org-link-add 'org-board-new)
;;   (defalias 'org-url-save 'org-board-new)
;;   (defalias 'org-uri-save 'org-board-new)
;;   (defalias 'org-url-new 'org-board-new)
;;   (defalias 'org-uri-new 'org-board-new)
;;   (defalias 'org-url-add 'org-board-new)
;;   (defalias 'org-uri-add 'org-board-new)
;;   (defalias 'b 'org-board-new)
;;   (define-key org-mode-map (kbd "C-M-i") #'org-board-new))
(el-get-bundle org-download
  :url "https://raw.githubusercontent.com/abo-abo/org-download/master/org-download.el")
(load "~/.emacs.d/el-get/org-download/org-download")
;;some search improvements for org mode
(use-package deft
  :ensure t
  :pin melpa-stable
  ;; :bind ("C-M-f" . deft)
  :config (setq deft-extensions '("txt" "org" "md"))
  (setq deft-directory "~/Org/")
  (setq deft-recursive t)
  (defalias 'org-find 'deft)
  (defalias 'org-search 'deft)
  (deft-setup)
  (defun deft-refresh-all ()
	(interactive)
	(deft-refresh)
	(deft-refresh-filter))
  (define-key deft-mode-map (kbd "<backspace>") #'deft-filter-decrement)
  (define-key deft-mode-map (kbd "<C-backspace>") #'deft-filter-decrement-word)
  (define-key deft-mode-map (kbd "M-i") #'deft-filter)
  (define-key deft-mode-map (kbd "C-k") #'deft-filter-clear)
  (define-key deft-mode-map (kbd "M-r") #'deft-refresh-all))
(use-package calfw
  :ensure t
  :pin melpa-stable
  :config (define-key cfw:calendar-mode-map (kbd "d") #'cfw:change-view-day)
  (define-key cfw:calendar-mode-map (kbd "w") #'cfw:change-view-week)
  (define-key cfw:calendar-mode-map (kbd "W") #'cfw:change-view-two-weeks)
  (define-key cfw:calendar-mode-map (kbd "m") #'cfw:change-view-month)
  (define-key cfw:calendar-mode-map (kbd "]") #'cfw:navi-next-month-command)
  (define-key cfw:calendar-mode-map (kbd "[") #'cfw:navi-previous-month-command)
  (define-key cfw:calendar-mode-map (kbd ",") #'cfw:navi-previous-week-command)
  (define-key cfw:calendar-mode-map (kbd ".") #'cfw:navi-next-week-command)
  (define-key cfw:calendar-mode-map (kbd "C-<left>") #'cfw:navi-prev-item-command)
  (define-key cfw:calendar-mode-map (kbd "C-<right>") #'cfw:navi-next-item-command)
  (define-key cfw:calendar-mode-map (kbd "C-<up>") #'cfw:navi-prev-item-command)
  (define-key cfw:calendar-mode-map (kbd "C-<down>") #'cfw:navi-next-item-command))
(use-package calfw-org
  :ensure t
  :pin melpa-stable
  :config (defalias 'cal 'cfw:open-org-calendar)
  (defalias 'calendar-org 'cfw:open-org-calendar))
(defun org-find-file ()
  (interactive)
  (projectile-switch-project-by-name "~/Org/"))
(defalias 'org-search-file 'org-find-file)
(defalias 'o 'org-find-file)
(use-package org-kanban
  :ensure t
  :config
  (define-key org-mode-map (kbd "C-,") 'org-kanban/prev)
  (define-key org-mode-map (kbd "C-.") 'org-kanban/next))
;; (use-package org-ehtml
;;   :ensure t
;;   :config (setq org-ehtml-docroot (expand-file-name "~/Org"))
;;   (setq org-ehtml-everything-editable t)
;;   (ws-start org-ehtml-handler 8888))

;; org-config.el ends here
